@startuml

package "User Module" {
    package "Entities" {
        class User {
            +Long id <<PK>>
            -String name
            -String password
            -String email
        }
    }

    package "Repositories" {
        interface UserRepository {
            +Optional<User> findById(Long id)
            +List<User> findAll()
            +User save(User user)
            +void deleteById(Long id)
            +boolean existsById(Long id)
        }
    }

    package "Services" {
        interface UserService {
            +User getUser(Long id)
            +List<User> getAllUsers()
            +User saveUser(User user)
            +User updateUser(Long id, User user)
            +void deleteUser(Long id)
        }

        class UserServiceImpl {
            +User getUser(Long id)
            +List<User> getAllUsers()
            +User saveUser(User user)
            +User updateUser(Long id, User user)
            +void deleteUser(Long id)
        }
    }

    package "Controllers" {
        class UserController {
            +ResponseEntity<User> getUser(Long id)
            +ResponseEntity<List<User>> getAllUsers()
            +ResponseEntity<User> saveUser(User user)
            +ResponseEntity<User> updateUser(Long id, User user)
            +ResponseEntity<Void> deleteUser(Long id)
        }
    }
}

package "Serie Module" {
    package "Entities" {
        class Series {
            +Long id <<PK>>
            -String name
            -String platform
            -String synopsis
            -String cover
        }

        class Rating {
            +Long id <<PK>>
            -Double rating
            -Long seriesId <<FK>>
            -Long userId <<FK>>
        }
    }

    package "Repositories" {
        interface SeriesRepository {
            +Optional<Series> findById(Long id)
            +List<Series> findAll()
            +Series save(Series series)
            +void deleteById(Long id)
            +boolean existsById(Long id)
        }

        interface RatingRepository {
            +Optional<Rating> findById(Long id)
            +List<Rating> findAll()
            +Rating save(Rating rating)
            +boolean existsByUserIdAndSeriesId(Long userId, Long seriesId)
        }
    }

    package "Services" {
        interface SeriesService {
            +Series getSeries(Long id)
            +List<Series> getAllSeries()
            +Series saveSeries(Series series)
            +Series updateSeries(Long id, Series series)
            +void deleteSeries(Long id)
        }

        class SeriesServiceImpl {
            +Series getSeries(Long id)
            +List<Series> getAllSeries()
            +Series saveSeries(Series series)
            +Series updateSeries(Long id, Series series)
            +void deleteSeries(Long id)
        }

        interface RatingService {
            +Rating getRating(Long id)
            +List<Rating> getAllRatings()
            +Rating saveRating(Rating rating)
            +Rating updateRating(Long id, Rating rating)
            +void deleteRating(Long id)
        }

        class RatingServiceImpl {
            +Rating getRating(Long id)
            +List<Rating> getAllRatings()
            +Rating saveRating(Rating rating)
            +Rating updateRating(Long id, Rating rating)
            +void deleteRating(Long id)
        }
    }

    package "Controllers" {
        class SeriesController {
            +ResponseEntity<Series> getSeries(Long id)
            +ResponseEntity<List<Series>> getAllSeries()
            +ResponseEntity<Series> saveSeries(Series series)
            +ResponseEntity<Series> updateSeries(Long id, Series series)
            +ResponseEntity<Void> deleteSeries(Long id)
        }

        class RatingController {
            +ResponseEntity<Rating> getRating(Long id)
            +ResponseEntity<List<Rating>> getAllRatings()
            +ResponseEntity<Rating> saveRating(Rating rating)
            +ResponseEntity<Rating> updateRating(Long id, Rating rating)
            +ResponseEntity<Void> deleteRating(Long id)
        }
    }
}

' Relationships
User "1" -- "0..*" Rating : "makes"
Series "1" -- "0..*" Rating : "has"
UserRepository ..> User
SeriesRepository ..> Series
RatingRepository ..> Rating
UserService ..> UserRepository
UserServiceImpl ..|> UserService
SeriesService ..> SeriesRepository
SeriesServiceImpl ..|> SeriesService
RatingService ..> RatingRepository
RatingServiceImpl ..|> RatingService
UserController ..> UserService
SeriesController ..> SeriesService
RatingController ..> RatingService

@enduml
